using Revise
using NCTSSOS
using LinearAlgebra

## Example 7.2.0
n = 4
supp = [[[1;3]], [[1;4]], [[2;3]], [[2;4]]]
coe = [-1; -1; -1; 1]
d = 1
opt,data = pstateopt_first(supp, coe, n, d, TS="block", constraint="nilpotent")

## Example 7.2.1
n = 4
supp = [[[1;4], [1;4]], [[2;3], [2;3]], [[1;4], [2;3]], [[1;3], [1;3]], [[2;4], [2;4]], [[1;3], [2;4]]]
coe = [-1; -1; -2; -1; -1; 2]
d = 3
opt,data = pstateopt_first(supp, coe, n, d, vargroup=[2;2], TS="block", constraint="nilpotent")
# opt,data = pstateopt_higher!(data, TS="block")

## Example 7.2.2
n = 6
supp = [[[1;4]], [[1], [4]], [[1;5]], [[1], [5]], [[1;6]], [[1], [6]], [[2;4]], [[2], [4]],
[[2;5]], [[2], [5]], [[2;6]], [[2], [6]], [[3;4]], [[3], [4]], [[3;5]], [[3], [5]]]
coe = [-1; 1; -1; 1; -1; 1; -1; 1; -1; 1; 1; -1; -1; 1; 1; -1]
d = 2
opt,data = pstateopt_first(supp, coe, n, d, vargroup=[3;3], TS="block", constraint="nilpotent")
# opt,data = pstateopt_higher!(data, TS="block")

## Example 7.2.3
n = 4
supp = [[[2]], [[3]], [[4]], [[1;3]], [[2;3]], [[1;4]], [[2;4]], [[1], [3]],
[[2], [3]], [[2], [4]], [[1], [1]], [[4], [4]]]
coe = -[1; 1; 1; -1; 1; 1; 1; -1; -1; -1; -1; -1]
d = 2
opt,data = pstateopt_first(supp, coe, n, d, vargroup=[2;2], TS=false, constraint="nilpotent")

# Example 7.2.3
# n = 8
# supp = [[[[1;3], [1;3], [5;7], [5;7]], [[2;3], [2;3], [5;7], [5;7]], [[1;3], [1;3], [5;8], [5;8]], [[2;3], [2;3], [5;8], [5;8]],
# [[1;4], [1;4], [6;7], [6;7]], [[2;4], [2;4], [6;7], [6;7]], [[1;4], [1;4], [6;8], [6;8]], [[2;4], [2;4], [6;8], [6;8]],
# [[1;3], [2;3], [5;7], [5;7]], [[1;3], [1;3], [5;7], [5;8]], [[1;3], [2;3], [5;7], [5;8]], [[1;3], [1;4], [5;7], [6;7]],
# [[1;3], [2;4], [5;7], [6;7]], [[1;3], [1;4], [5;7], [6;8]], [[1;3], [2;4], [5;7], [6;8]],
# [[2;3], [2;3], [5;7], [5;8]], [[2;3], [1;4], [5;7], [6;7]], [[2;3], [2;4], [5;7], [6;7]], [[2;3], [1;4], [5;7], [6;8]],
# [[2;3], [2;4], [5;7], [6;8]], [[1;3], [2;3], [5;8], [5;8]], [[1;3], [1;4], [5;8], [6;7]], [[1;3], [2;4], [5;8], [6;7]],
# [[1;3], [1;4], [5;8], [6;8]], [[1;3], [2;4], [5;8], [6;8]], [[2;3], [1;4], [5;8], [6;7]], [[2;3], [2;4], [5;8], [6;7]],
# [[2;3], [1;4], [5;8], [6;8]], [[2;3], [2;4], [5;8], [6;8]], [[1;4], [2;4], [6;7], [6;7]], [[1;4], [1;4], [6;7], [6;8]],
# [[1;4], [2;4], [6;7], [6;8]], [[2;4], [2;4], [6;7], [6;8]], [[1;4], [2;4], [6;8], [6;8]],
# [[1;3], [5;7]], [[2;3], [5;7]], [[1;3], [5;8]], [[2;3], [5;8]], [[1;4], [6;7]], [[2;4], [6;7]], [[1;4], [6;8]], [[2;4], [6;8]]]]
# coe = [-[-1/8*[1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 4; 2; -2; -2; 2; 2; 2; -2; -2; 2; 2; 2; -2; -2; 2; 2; -2; -2; 2; -2; -2; 4; -2; -2];
# 1; 1; 1; 1; 1; -1; -1; 1]]
# d = 4
# opt,data = pstateopt_first(supp, coe, n, d, vargroup=[2;2;2;2], TS="block", constraint="projection")

## Example 8.1.3
# quantum bilocal networks
n = 9
supp = [[[4;7]], [[5;8]], [[6;9]], [[1;4]], [[2;5]], [[3;6]], [[1;5;9]], [[1;6;8]], [[2;4;9]], [[2;6;7]], [[3;4;8]], [[3;5;7]]]
coe = -[1/3;1/3;1/3;-1/3;-1/3;-1/3;-1;-1;-1;-1;-1;-1]
d = 5
# time = @elapsed begin
opt,data = pstateopt_first(supp, coe, n, d, vargroup=[3;3;3], TS="block", solve=false, bilocal=true)
opt,data = pstateopt_higher!(data, TS="block", bilocal=true, solve=true, solver="COSMO")
# end
# io = open("/home/jwang/Programs/NCTSSOS/examples/bilocal.txt", "w")
# write(io, "opt = $opt\n")
# write(io, "time = $time\n")
# close(io)
# check flatness
k = 4
ind = [sum(length.(data.ptsupp[data.tbasis[1][data.wbasis[1][i][1]]])) + length(data.basis[1][data.wbasis[1][i][2]]) <= 1 for i = 1:length(data.wbasis[1][data.blocks[1][k]])]
r0 = count(eigvals(data.moment[k][ind,ind]) .> 1e-3)
r1 = count(eigvals(data.moment[k]) .> 1e-3)
println([r0, r1])

# n = 10
# supp = [[[[4;7]], [[5;8]], [[6;9]], [[1;4]], [[2;5]], [[3;6]], [[1;5;9]], [[1;6;8]], [[2;4;9]], [[2;6;7]], [[3;4;8]], [[3;5;7]], [[10]]],
# [[[10], [10]], [[1], [1]]], [[[10], [10]], [[2], [2]]], [[[10], [10]], [[3], [3]]], [[[10], [10]], [[4], [4]]], [[[10], [10]], [[5], [5]]], 
# [[[10], [10]], [[6], [6]]], [[[10], [10]], [[7], [7]]], [[[10], [10]], [[8], [8]]], [[[10], [10]], [[9], [9]]], 
# [[[10], [10]], [[1;5], [1;5]]], [[[10], [10]], [[1;6], [1;6]]], [[[10], [10]], [[2;4], [2;4]]], [[[10], [10]], [[2;6], [2;6]]], [[[10], [10]], [[3;4], [3;4]]], [[[10], [10]], [[3;5], [3;5]]],
# [[[10], [10]], [[4;8], [4;8]]], [[[10], [10]], [[4;9], [4;9]]], [[[10], [10]], [[5;7], [5;7]]], [[[10], [10]], [[5;9], [5;9]]], [[[10], [10]], [[6;7], [6;7]]], [[[10], [10]], [[6;8], [6;8]]],
# [[[10], [10]], [[1;4;7], [1;4;7]]], [[[10], [10]], [[1;4;8], [1;4;8]]], [[[10], [10]], [[1;4;9], [1;4;9]]], [[[10], [10]], [[1;5;7], [1;5;7]]], [[[10], [10]], [[1;5;8], [1;5;8]]], 
# [[[10], [10]], [[1;6;7], [1;6;7]]], [[[10], [10]], [[1;6;9], [1;6;9]]], [[[10], [10]], [[2;4;7], [2;4;7]]], [[[10], [10]], [[2;4;8], [2;4;8]]], 
# [[[10], [10]], [[2;5;7], [2;5;7]]], [[[10], [10]], [[2;5;8], [2;5;8]]], [[[10], [10]], [[2;5;9], [2;5;9]]], [[[10], [10]], [[2;6;8], [2;6;8]]], 
# [[[10], [10]], [[2;6;9], [2;6;9]]], [[[10], [10]], [[3;4;7], [3;4;7]]], [[[10], [10]], [[3;4;9], [3;4;9]]], [[[10], [10]], [[3;5;8], [3;5;8]]], 
# [[[10], [10]], [[3;5;9], [3;5;9]]], [[[10], [10]], [[3;6;7], [3;6;7]]], [[[10], [10]], [[3;6;8], [3;6;8]]], [[[10], [10]], [[3;6;9], [3;6;9]]], [[[10], [10]], [[]]]]
# coe = [-[1/3;1/3;1/3;-1/3;-1/3;-1/3;-1;-1;-1;-1;-1;-1;-5]]
# for i = 1:42
#     push!(coe, [1;-1])
# end
# push!(coe, [-1;1])
# d = 3
# opt,data = pstateopt_first(supp, coe, n, d, scalar=1, vargroup=[3;3;3;1], TS="block", solve=true, bilocal=true)
# opt,data = pstateopt_higher!(data, TS="block", bilocal=true)

# n = 6
# supp = [[[1]], [[2]], [[3]], [[4]], [[5]], [[6]], 
# [[1;3]], [[1;4]], [[2;3]], [[2;4]], [[1;5]], [[1;6]], [[2;5]], [[2;6]], [[3;5]], [[3;6]], [[4;5]], [[4;6]], 
# [[1;3;5]], [[1;3;6]], [[1;4;5]], [[1;4;6]], [[2;3;5]], [[2;3;6]], [[2;4;5]], [[2;4;6]]]
# tsupp = [[[1]], [[2]], [[3]], [[4]], [[5]], [[6]], [[1;3]], [[1;4]], [[2;3]], [[2;4]], [[1], [5]], [[1], [6]], [[2], [5]], [[2] ,[6]], 
# [[3;5]], [[3;6]], [[4;5]], [[4;6]], [[1;3;5]], [[1;3;6]], [[1;4;5]], [[1;4;6]], [[2;3;5]], [[2;3;6]], [[2;4;5]], [[2;4;6]]]
# csupp = Vector{Vector{UInt16}}[[[1], [2], [3], [4], [5], [6], [1;3], [1;4], [2;3], [2;4], [1;5], [1;6], [2;5], [2;6], 
# [3;5], [3;6], [4;5], [4;6], [1;3;5], [1;3;6], [1;4;5], [1;4;6], [2;3;5], [2;3;6], [2;4;5], [2;4;6]],
# [[1;1], [1]], [[2;2], [2]], [[3;3], [3]], [[4;4], [4]], [[5;5], [5]], [[6;6], [6]]]

# coe_set = Vector{Float64}[[1], [-1]]
# for l = 1:17
#     coe_sset = Vector{Float64}[]
#     for k = 1:length(coe_set)
#         push!(coe_sset, [coe_set[k]; 1], [coe_set[k]; -1])
#     end
#     coe_set = coe_sset
# end

# i = 1
# opt1 = 0
# opt2 = opt3 = 0
# while i <= 20 && (abs(opt1-opt2)<1e-6 || abs(opt1-opt3)<1e-6 || abs(opt2-opt3)<1e-6)
# while ceil(opt1) - opt1 < 0.2 || opt1 - floor(opt1) < 0.2
# coe = sign.(randn(26))
# opt1,data = pstateopt_first(supp, coe, n, 3, vargroup=[2;2;2], TS=false, constraint="projection", QUIET=true)
# ind = [sum(length.(data.ptsupp[data.tbasis[data.wbasis[i][1]]])) + length(data.basis[data.wbasis[i][2]]) <= 2 for i = 1:length(data.wbasis)]
# r2 = count(eigvals(data.moment[1][ind,ind]) .> 1e-3)
# r3 = count(eigvals(data.moment[1]) .> 1e-3)
# println([i, r2, r3])
# i += 1
# end

# opt2,data = pstateopt_first(tsupp, coe, n, 3, vargroup=[2;2;2], TS=false, constraint="projection", QUIET=true)
# ind = [sum(length.(data.ptsupp[data.tbasis[data.wbasis[i][1]]])) + length(data.basis[data.wbasis[i][2]]) <= 2 for i = 1:length(data.wbasis)]
# r2 = count(eigvals(data.moment[1][ind,ind]) .> 1e-3)
# r3 = count(eigvals(data.moment[1]) .> 1e-3)
# println([r2, r3])

# ccoe = [coe, [1;-1], [1;-1], [1;-1], [1;-1], [1;-1], [1;-1]]
# opt3,sol,data = cs_tssos_first(csupp, ccoe, n, 3, numeq=6, CS=false, TS=false, solution=true, QUIET=true)

# println([opt1; opt2; opt3])
# end