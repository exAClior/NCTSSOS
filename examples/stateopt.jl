# This script shows how to solve real state polynomial optimization problems using NCTSSOS.
# Examples below are taken from the paper: "State polynomials: positivity, optimization and nonlinear Bell inequalities"
using NCTSSOS
using LinearAlgebra

## Example 7.2.0
n = 4 # number of variables
# define the cost: ς(x1y1) + ς(x1y2) + ς(x2y1) − ς(x2y2)
supp = [[[1;3]], [[1;4]], [[2;3]], [[2;4]]]
coe = [-1; -1; -1; 1]
d = 1 # relaxation order
opt,data = pstateopt_first(supp, coe, n, d, vargroup=[2;2], TS="block", constraint="unipotent")
# vargroup = [2;2] defines [xi, yj] = 0
# constraint = "unipotent" defines xi^2 = 1, yj^2 = 1

## Example 7.2.1
n = 4
supp = [[[1;4], [1;4]], [[2;3], [2;3]], [[1;4], [2;3]], [[1;3], [1;3]], [[2;4], [2;4]], [[1;3], [2;4]]]
coe = [-1; -1; -2; -1; -1; 2]
d = 3
opt,data = pstateopt_first(supp, coe, n, d, vargroup=[2;2], TS="block", constraint="unipotent")

## Example 7.2.2
n = 6
supp = [[[1;4]], [[1], [4]], [[1;5]], [[1], [5]], [[1;6]], [[1], [6]], [[2;4]], [[2], [4]],
[[2;5]], [[2], [5]], [[2;6]], [[2], [6]], [[3;4]], [[3], [4]], [[3;5]], [[3], [5]]]
coe = [-1; 1; -1; 1; -1; 1; -1; 1; -1; 1; 1; -1; -1; 1; 1; -1]
d = 2
opt,data = pstateopt_first(supp, coe, n, d, vargroup=[3;3], TS="block", constraint="unipotent")

## Example 7.2.3
n = 4
supp = [[[2]], [[3]], [[4]], [[1;3]], [[2;3]], [[1;4]], [[2;4]], [[1], [3]],
[[2], [3]], [[2], [4]], [[1], [1]], [[4], [4]]]
coe = -[1; 1; 1; -1; 1; 1; 1; -1; -1; -1; -1; -1]
d = 2
opt,data = pstateopt_first(supp, coe, n, d, vargroup=[2;2], TS="block", constraint="unipotent")

# quantum bilocal networks
## Example 8.1.1
n = 6
supp = [[[1;3;5], [1;3;5]], [[1;3;6], [1;3;6]], [[2;3;5], [2;3;5]], [[2;3;6], [2;3;6]], [[1;4;5], [1;4;5]], 
[[1;4;6], [1;4;6]], [[2;4;5], [2;4;5]], [[2;4;6], [2;4;6]], [[1;3;5], [1;3;6]], [[1;3;5], [2;3;5]], 
[[1;3;5], [2;3;6]], [[1;3;5], [1;4;5]], [[1;3;5], [1;4;6]], [[1;3;5], [2;4;5]], [[1;3;5], [2;4;6]],
[[1;3;6], [2;3;5]], [[1;3;6], [2;3;6]], [[1;3;6], [1;4;5]], [[1;3;6], [1;4;6]], [[1;3;6], [2;4;5]], 
[[1;3;6], [2;4;6]], [[2;3;5], [2;3;6]], [[2;3;5], [1;4;5]], [[2;3;5], [1;4;6]], [[2;3;5], [2;4;5]], 
[[2;3;5], [2;4;6]], [[2;3;6], [1;4;5]], [[2;3;6], [1;4;6]], [[2;3;6], [2;4;5]], [[2;3;6], [2;4;6]],
[[1;4;5], [1;4;6]], [[1;4;5], [2;4;5]], [[1;4;5], [2;4;6]], [[1;4;6], [2;4;5]], [[1;4;6], [2;4;6]], 
[[2;4;5], [2;4;6]], [[1;3;5]], [[1;3;6]], [[2;3;5]], [[2;3;6]], [[1;4;5]], [[1;4;6]], [[2;4;5]], [[2;4;6]]]
coe = [1/8*[1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; -2; 2; 2; -2; 2; 2; -2; 2; 2; -2; 2; -2; 2; 2; -2; 
-2; 2; 2; -2; -2; -2; 2; 2; -2; -2]; -[1; 1; 1; 1; 1; -1; -1; 1]]
d = 3
@time begin
opt,data = pstateopt_first(supp, coe, n, d, constraint="unipotent", vargroup=[2;2;2], TS="block", solve=true, bilocal=[2;5])
end

## Example 8.1.2
n = 8
a = [[1;4;7], [1;4;8], [2;4;7], [2;4;8], [3;4;7], [3;4;8], [4;7], [4;8]]
ca = [1/2; 1/2; 1/2; 1/2; 1/2; 1/2; 1/2; 1/2]
b = [[1;5;7], [1;5;8], [2;5;7], [2;5;8], [3;5;7], [3;5;8], [5;7], [5;8], [1;6;7], [1;6;8], [2;6;7], [2;6;8]]
cb = [1/2; -1/2; 1/2; -1/2; -1/2; 1/2; 1/2; -1/2; 1/2; -1/2; -1/2; 1/2]
c = [[1], [2]]
cc = [1; 1]
supp = Vector{Vector{Vector{Int}}}(undef, 275)
coe = zeros(275)
k = 1
for i = 1:8, j = 1:12
    supp[k] = [a[i], b[j]]
    coe[k] = -2*ca[i]*cb[j]
    k += 1
end
for i = 1:8, j = 1:2
    supp[k] = [a[i], c[j]]
    coe[k] = -2*ca[i]*cc[j]
    k += 1
end
for i = 1:12, j = 1:2
    supp[k] = [b[i], c[j]]
    coe[k] = -2*cb[i]*cc[j]
    k += 1
end
for i = 1:8
    supp[k:k+1] = [[a[i]], [a[i], a[i]]]
    coe[k:k+1] = [-8*ca[i], ca[i]^2]
    k += 2
    for j = i+1:8
        supp[k] = [a[i], a[j]]
        coe[k] = 2*ca[i]*ca[j]
        k += 1
    end
end
for i = 1:12
    supp[k:k+1] = [[b[i]], [b[i], b[i]]]
    coe[k:k+1] = [-8*cb[i], cb[i]^2]
    k += 2
    for j = i+1:12
        supp[k] = [b[i], b[j]]
        coe[k] = 2*cb[i]*cb[j]
        k += 1
    end
end
for i = 1:2
    supp[k:k+1] = [[c[i]], [c[i], c[i]]]
    coe[k:k+1] = [8*cc[i], cc[i]^2]
    k += 2
    for j = i+1:2
        supp[k] = [c[i], c[j]]
        coe[k] = 2*cc[i]*cc[j]
        k += 1
    end   
end
d = 3
@time begin
opt,data = pstateopt_first(supp, coe, n, d, constraint="unipotent", vargroup=[3;3;2], TS="block", solve=false, bilocal=[3;7])
opt,data = pstateopt_higher!(data, TS="block", bilocal=[3;7])
end
println(-opt-16)

## Example 8.1.3
n = 9
supp = [[[4;7]], [[5;8]], [[6;9]], [[1;4]], [[2;5]], [[3;6]], [[1;5;9]], [[1;6;8]], [[2;4;9]], [[2;6;7]], [[3;4;8]], [[3;5;7]]]
coe = -[1/3;1/3;1/3;-1/3;-1/3;-1/3;-1;-1;-1;-1;-1;-1]
d = 4
@time begin
opt,data = pstateopt_first(supp, coe, n, d, constraint="unipotent", vargroup=[3;3;3], TS="block", solve=false, bilocal=[3;7], zero_moments=true)
opt,data = pstateopt_higher!(data, TS="block", bilocal=[3;7], zero_moments=true)
end
# check flatness
for k = 1:4
ind1 = [data.wbasis[1][data.blocks[1][k][i]][1] == 1 && length(data.basis[1][data.wbasis[1][data.blocks[1][k][i]][2]]) <= 1 for i = 1:data.blocksize[1][k]]
ind2 = [data.wbasis[1][data.blocks[1][k][i]][1] == 1 && length(data.basis[1][data.wbasis[1][data.blocks[1][k][i]][2]]) <= 2 for i = 1:data.blocksize[1][k]]
ind3 = [data.wbasis[1][data.blocks[1][k][i]][1] == 1 && length(data.basis[1][data.wbasis[1][data.blocks[1][k][i]][2]]) <= 3 for i = 1:data.blocksize[1][k]]
ind4 = [data.wbasis[1][data.blocks[1][k][i]][1] == 1 && length(data.basis[1][data.wbasis[1][data.blocks[1][k][i]][2]]) <= 4 for i = 1:data.blocksize[1][k]]
r1 = count(eigvals(data.moment[k][ind1,ind1]) .> 1e-3)
r2 = count(eigvals(data.moment[k][ind2,ind2]) .> 1e-3)
r3 = count(eigvals(data.moment[k][ind3,ind3]) .> 1e-3)
r4 = count(eigvals(data.moment[k][ind4,ind4]) .> 1e-3)
println([r1, r2, r3, r4])
end

# Example 8.1.3+
n = 10
supp = [[[[4;7]], [[5;8]], [[6;9]], [[1;4]], [[2;5]], [[3;6]], [[1;5;9]], [[1;6;8]], [[2;4;9]], [[2;6;7]], [[3;4;8]], [[3;5;7]], [[10]]],
[[[10], [10]], [[1], [1]]], [[[10], [10]], [[2], [2]]], [[[10], [10]], [[3], [3]]], [[[10], [10]], [[4], [4]]], [[[10], [10]], [[5], [5]]],
[[[10], [10]], [[6], [6]]], [[[10], [10]], [[7], [7]]], [[[10], [10]], [[8], [8]]], [[[10], [10]], [[9], [9]]],
[[[10], [10]], [[1;5], [1;5]]], [[[10], [10]], [[1;6], [1;6]]], [[[10], [10]], [[2;4], [2;4]]], [[[10], [10]], [[2;6], [2;6]]], [[[10], [10]], [[3;4], [3;4]]], [[[10], [10]], [[3;5], [3;5]]],
[[[10], [10]], [[4;8], [4;8]]], [[[10], [10]], [[4;9], [4;9]]], [[[10], [10]], [[5;7], [5;7]]], [[[10], [10]], [[5;9], [5;9]]], [[[10], [10]], [[6;7], [6;7]]], [[[10], [10]], [[6;8], [6;8]]],
[[[10], [10]], [[1;4;7], [1;4;7]]], [[[10], [10]], [[1;4;8], [1;4;8]]], [[[10], [10]], [[1;4;9], [1;4;9]]], [[[10], [10]], [[1;5;7], [1;5;7]]], [[[10], [10]], [[1;5;8], [1;5;8]]],
[[[10], [10]], [[1;6;7], [1;6;7]]], [[[10], [10]], [[1;6;9], [1;6;9]]], [[[10], [10]], [[2;4;7], [2;4;7]]], [[[10], [10]], [[2;4;8], [2;4;8]]],
[[[10], [10]], [[2;5;7], [2;5;7]]], [[[10], [10]], [[2;5;8], [2;5;8]]], [[[10], [10]], [[2;5;9], [2;5;9]]], [[[10], [10]], [[2;6;8], [2;6;8]]],
[[[10], [10]], [[2;6;9], [2;6;9]]], [[[10], [10]], [[3;4;7], [3;4;7]]], [[[10], [10]], [[3;4;9], [3;4;9]]], [[[10], [10]], [[3;5;8], [3;5;8]]],
[[[10], [10]], [[3;5;9], [3;5;9]]], [[[10], [10]], [[3;6;7], [3;6;7]]], [[[10], [10]], [[3;6;8], [3;6;8]]], [[[10], [10]], [[3;6;9], [3;6;9]]], [[[10], [10]], [[]]]]
coe = [-[1/3;1/3;1/3;-1/3;-1/3;-1/3;-1;-1;-1;-1;-1;-1;-5]]
for i = 1:42
    push!(coe, [1;-1])
end
push!(coe, [-1;1])
d = 3
opt,data = pstateopt_first(supp, coe, n, d, scalar=1, vargroup=[3;3;3;1], TS="block", solve=true, bilocal=[3;7])
opt,data = pstateopt_higher!(data, TS="block", bilocal=[3;7])

# Example 6.2.3 from the trace optimization paper
n = 8
supp = [[[[1;3], [1;3], [5;7], [5;7]], [[2;3], [2;3], [5;7], [5;7]], [[1;3], [1;3], [5;8], [5;8]], [[2;3], [2;3], [5;8], [5;8]],
[[1;4], [1;4], [6;7], [6;7]], [[2;4], [2;4], [6;7], [6;7]], [[1;4], [1;4], [6;8], [6;8]], [[2;4], [2;4], [6;8], [6;8]],
[[1;3], [2;3], [5;7], [5;7]], [[1;3], [1;3], [5;7], [5;8]], [[1;3], [2;3], [5;7], [5;8]], [[1;3], [1;4], [5;7], [6;7]],
[[1;3], [2;4], [5;7], [6;7]], [[1;3], [1;4], [5;7], [6;8]], [[1;3], [2;4], [5;7], [6;8]],
[[2;3], [2;3], [5;7], [5;8]], [[2;3], [1;4], [5;7], [6;7]], [[2;3], [2;4], [5;7], [6;7]], [[2;3], [1;4], [5;7], [6;8]],
[[2;3], [2;4], [5;7], [6;8]], [[1;3], [2;3], [5;8], [5;8]], [[1;3], [1;4], [5;8], [6;7]], [[1;3], [2;4], [5;8], [6;7]],
[[1;3], [1;4], [5;8], [6;8]], [[1;3], [2;4], [5;8], [6;8]], [[2;3], [1;4], [5;8], [6;7]], [[2;3], [2;4], [5;8], [6;7]],
[[2;3], [1;4], [5;8], [6;8]], [[2;3], [2;4], [5;8], [6;8]], [[1;4], [2;4], [6;7], [6;7]], [[1;4], [1;4], [6;7], [6;8]],
[[1;4], [2;4], [6;7], [6;8]], [[2;4], [2;4], [6;7], [6;8]], [[1;4], [2;4], [6;8], [6;8]],
[[1;3], [5;7]], [[2;3], [5;7]], [[1;3], [5;8]], [[2;3], [5;8]], [[1;4], [6;7]], [[2;4], [6;7]], [[1;4], [6;8]], [[2;4], [6;8]]]]
coe = [-[-1/8*[1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 4; 2; -2; -2; 2; 2; 2; -2; -2; 2; 2; 2; -2; -2; 2; 2; -2; -2; 2; -2; -2; 4; -2; -2];
1; 1; 1; 1; 1; -1; -1; 1]]
d = 4
opt,data = pstateopt_first(supp, coe, n, d, vargroup=[2;2;2;2], TS="block", constraint="projection")
